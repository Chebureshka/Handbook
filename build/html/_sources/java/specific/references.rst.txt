.. include:: ../../defs.rst

References
************************************

http://www.javaportal.ru/java/articles/referenceclasses.html


get()
    Получает ссылаемый объект или null, при отсутствии оного

clear()
    Обнулить ссылку. Но не вызов gc на нем

strong reference
    В Java объекты, создаваемые через оператор new создаются по strong ссылке.
    Уничтожаются при отсутствии strong ссылок.


java.lang.ref
-------------

soft reference
  Объекты, созданные через SoftReference, будут собраны в случае, если JVM требует память.
  То есть имеется гарантия, что все soft reference объекты будут собраны перед тем, как JVM выбросит OutOfMemoryError.

  SoftReference часто используется для кешей, потребляющих большое количество памяти.

weak reference
  WeakReference не спасает объект от финализации, даже если имеется достаточное количество свободной памяти.

  Как только на объект не останется strong и soft ссылок, он может быть финализирован.

  Используется для кешей и для создания цепей связанных между собой объектов.

phantom reference
  Только если на объект не остаётся никаких ссылок вообще, кроме PhantomReference, их механизм вступает в действие.

  Если на объект остаются только PhantomReference:

      1) Во время ближайшей сборки мусора у объекта будет вызван метод ``finalize()``. Но, если метод ``finalize()`` не был переопределен, этот шаг пропускается, а выполнится сразу шаг 2.
      
      2) Во время следующей сборки мусора, объект будет помещен в специальную очередь (указанную в конструкторе **ReferenceQueue**) призрачных объектов, из которой будет удален, когда у PhantomReference вызовут метод clear().
      
      Фактически объект "умер" в нашем (Java) мире, но не исчез, а остался в нем призраком – на него хранится ссылка в очереди призрачных объектов (до вызова clear).

  Этот тип ссылок используется как альтернатива финализации (для более гибкого освобождения ресурсов).




Взаимодействие сборщика мусора и ссылок
----------------------------------------

Если «сборщик мусора» обнаруживает объект, который может быть доступен посредством SoftReference или WeakReference, происходит следующее:
    1) поля объекта, который может быть доступен через Reference, устанавливаются в null, что делает данный объект недоступным посредством прямой ссылки.

    2) данный объект объявляется finalizable.

    3) после того, как был запущен метод ``finalize()`` и память, зарезервированная под объект освобождена – объект помещается в **ReferenceQueue**, если **ReferenceQueue** существует.

Если «сборщик мусора» обнаруживает объект, который может быть доступен посредством «фантомной» ссылки, происходит следующее:
    1) объект доступный посредством «фантомной» ссылки объявляется finalizable.
    
    2) в отличии от «мягкой» и «слабой» ссылки – фантомная ссылка добавляется к своему **ReferenceQueue** перед тем как освободится память.
