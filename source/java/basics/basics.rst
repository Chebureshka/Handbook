.. include:: ../../defs.rst

Java Types
##################

Контракт equals/hashCode
************************

.. container:: left-col

  **{Равные по ссылке пары объектов}** являются подмножеством **{Равные по equals пары объектов}** являются подмножеством **{Равные по hashCode пары объектов}**


  * Для одного и того-же объекта, хеш-код всегда будет одинаковым

  * Если объекты одинаковые, то и хеш-коды одинаковые

  * Если хеш-коды равны, то входные объекты не всегда равны

  * Если хеш-коды разные, то и объекты гарантированно разные


Классы-обертки
***************

Автоупаковка
============
.. container:: left-col

  * При присвоении значения примитивного типа переменной соответствующего класса-обёртки.

  * При передаче примитивного типа в параметр метода, ожидающего соответствующий ему класс-обёртку.

Автораспаковка
==============
.. container:: left-col

  * При присвоении экземпляра класса-обёртки переменной соответствующего примитивного типа.
    Если класс-обёртка содержит null, при распаковке возникнет исключение NPE.

  * В выражениях, в которых один или оба аргумента являются экземплярами классов-обёрток (кроме операции == и !=).
    Арифметические операторы и операторы сравнения (исключение == и !=) применяются только к примитивным типам.
    При сравнении классов-обёрток оператором == или !=, происходит сравнение по ссылкам.

  * При передаче объекта класса-обёртки в метод, ожидающий соответствующий примитивный тип.
    Если для метода реализована перегрузка с соответствующим классом-обёрткой, вызовется именно он.

IntegerCache
============
.. container:: left-col

  IntegerCache инициализируется во время загрузки класса.

  Integer содержит приватный внутренний класс IntegerCache, содержащий объекты типа Integer, для диапазона от -128 до 127 (изменяется параметрами запуска из коммандной строки). 

  Когда код боксится в Integer, и имеет значение из этого диапазона, рантайм использует кэш вместо создания нового Integer.


StringPool 	
==========
.. container:: left-col

  StringPool - специальная область памяти, где Strings хранятся в JVM.

  .. container:: code-markup

    ``intern``
      Благодаря неизменности Strings в Java, JVM может оптимизировать объем памяти, выделенный для них, сохраняя только одну копию каждого литерала String в пуле. Этот процесс называется *interning* .

      Когда создается переменнаю String и присваивается ей значение, JVM ищет в пуле String с равным значением.

      .. note::
        Java String хранится в пространстве Heap

    ``new``
      Когда мы создается String с помощью оператора new, компилятор Java создаст новый объект и сохранит его в пространстве кучи, зарезервированном для JVM.

      Каждая строка String, созданная таким образом, будет указывать на другую область памяти со своим собственным адресом.

.. container:: right-col

  .. container:: links-block

    .. rubric:: Ссылки:

    https://www.codeflow.site/ru/article/java-string-pool

  .. raw:: html

      <iframe width="560" height="315" src="https://www.youtube.com/embed/SZFe3m1DV1A" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

  |br|

Comparator
***************
.. container:: left-col

  Интерфейс Comparator содержит ряд методов, ключевым из которых является метод ``compare()``

  .. code-block:: java

    public interface Comparator<E> {

        int compare(T a, T b);
        // остальные методы
    }

  Метод ``compare`` также возвращает числовое значение - если оно отрицательное, то объект a предшествует объекту b, иначе - наоборот. А если метод возвращает ноль, то объекты равны.

.. container:: right-col

  .. container:: links-block

    .. rubric:: Ссылки:

    https://metanit.com/java/tutorial/5.6.php

    https://www.baeldung.com/java-8-comparator-comparing

    https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html