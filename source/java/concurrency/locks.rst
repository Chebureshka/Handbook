.. include:: ../../defs.rst

java.util.concurrent.Synchronizers
*******************************************************

.. contents:: 
    :local:

Synchronizers
==============================================
.. container:: left-col

    Синхронизаторы – вспомогательные утилиты для синхронизации потоков, которые дают возможность разработчику регулировать и/или ограничивать работу потоков и предоставляют 
    более высокий уровень абстракции, чем основные примитивы языка (мониторы).

.. container:: right-col

    .. container:: links-block

        .. rubric:: Ссылки:

        `Справочник по синхронизаторам java.util.concurrent.* <https://habr.com/ru/post/277669/>`_


Semaphore
-----------------------------

.. container:: left-col

    Синхронизатор Semaphore реализует шаблон синхронизации Семафор. 
    Чаще всего, семафоры необходимы, когда нужно ограничить доступ к некоторому общему ресурсу.

    .. figure:: ../../_static/9da48f85b5874362bc2279f181613c0e.gif

CountDownLatch
-----------------------------

.. container:: left-col

    Предоставляет возможность любому количеству потоков в блоке кода ожидать до тех пор, пока не завершится определенное количество операций, выполняющихся в других потоках, перед тем как они будут «отпущены»

    .. figure:: ../../_static/46b3aeb417cf4fb4ba271b4c66b52436.gif

CyclicBarrier
-----------------------------

.. container:: left-col

    Циклический барьер является точкой синхронизации, в которой указанное количество параллельных потоков встречается и блокируется. Как только все потоки прибыли, выполняется опционное действие (или не выполняется, если барьер был инициализирован без него), и, после того, как оно выполнено, барьер ломается и ожидающие потоки «освобождаются».

    .. figure:: ../../_static/89af0cb71aad4465bb9c934b8be91a67.gif

Exchanger<V>
-----------------------------

.. container:: left-col

    Exchanger (обменник) может понадобиться, для того, чтобы обменяться данными между двумя потоками в определенной точки работы обоих потоков.

    .. figure:: ../../_static/947ef3f47ff843a099059006b30ea54d.gif

Phaser
-----------------------------

.. container:: left-col

    Phaser (фазер), как и CyclicBarrier, является реализацией шаблона синхронизации Барьер, но, в отличии от CyclicBarrier, предоставляет больше гибкости. 
    Этот класс позволяет синхронизировать потоки, представляющие отдельную фазу или стадию выполнения общего действия. 
    Как и CyclicBarrier, Phaser является точкой синхронизации, в которой встречаются потоки-участники. 
    Когда все стороны прибыли, Phaser переходит к следующей фазе и снова ожидает ее завершения.

    .. figure:: ../../_static/0866a4b7acdf416384d4e7372b49a34b.gif

Locks
======================================
.. container:: left-col

    Представляет собой альтернативные и более гибкие механизмы синхронизации потоков по сравнению с базовыми ``synchronized``, ``wait``, ``notify``, ``notifyAll``.

    .. figure:: ../../_static/4f1edf0f8640f54475bf37ff72d04895.png


.. container:: right-col

    .. container:: links-block
    
        .. rubric:: Ссылки:
    
        `java.util.concurrent.* <https://habr.com/ru/company/luxoft/blog/157273/>`_


Lock
-----
.. container:: left-col

    Lock — Базовый интерфейс из lock framework, предоставляющий более гибкий подход по ограничению доступа к ресурсам/блокам нежели при использовании synchronized.

ReentrantLock
--------------
.. container:: left-col

    ReentrantLock — Лок на вхождение. Только один поток может зайти в защищенный блок. Класс поддерживает «честную» (fair) и «нечестную» (non-fair) разблокировку потоков. 

ReadWriteLock
-------------
.. container:: left-col
    
    ReadWriteLock — Дополнительный интерфейс для создания read/write локов. Такие локи необычайно полезны, когда в системе много операций чтения и мало операций записи.

Condition
----------
.. container:: left-col

    Condition — Интерфейс, который описывает альтернативные методы стандарным ``wait/notify/notifyAll``. 
    Объект с условием чаще всего получается из локов через метод ``lock.newCondition()``. Тем самым можно получить несколько комплектов ``wait/notify`` для одного объекта.