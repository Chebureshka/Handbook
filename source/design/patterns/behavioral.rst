.. include:: ../../defs.rst

Поведенческие
*************
Решают задачи эффективного и безопасного взаимодействия между объектами программы.

.. contents::



Цепочка обязанностей
======================
    Позволяет передавать запросы последовательно по цепочке обработчиков. Каждый последующий обработчик решает, может ли он обработать запрос сам и стоит ли передавать запрос дальше по цепи.

Команда
=======
    Превращает запросы в объекты, позволяя передавать их как аргументы при вызове методов, ставить запросы в очередь, логировать их, а также поддерживать отмену операций.

Итератор
==========
    Даёт возможность последовательно обходить элементы составных объектов, не раскрывая их внутреннего представления.

Посредник
===========
    Позволяет уменьшить связанность множества классов между собой, благодаря перемещению этих связей в один класс-посредник.
    Паттерн Посредник заставляет объекты общаться не напрямую друг с другом, а через отдельный объект-посредник, который знает, кому нужно перенаправить тот или иной запрос. 
        Благодаря этому, компоненты системы будут зависеть только от посредника, а не от десятков других компонентов.

Снимок
======
    Позволяет сохранять и восстанавливать прошлые состояния объектов, не раскрывая подробностей их реализации.
    Паттерн Снимок поручает создание копии состояния объекта самому объекту, который этим состоянием владеет.

Наблюдатель
===========
    Создаёт механизм подписки, позволяющий одним объектам следить и реагировать на события, происходящие в других объектах.

Состояние
============
    Позволяет объектам менять поведение в зависимости от своего состояния. Извне создаётся впечатление, что изменился класс объекта.
    В Состоянии сами конкретные состояния могут переключать контекст (исполняемое поведение).

Стратегия
==========
    Определяет семейство схожих алгоритмов и помещает каждый из них в собственный класс, после чего алгоритмы можно взаимозаменять прямо во время исполнения программы.
    Паттерн Стратегия предлагает определить семейство схожих алгоритмов, которые часто изменяются или расширяются, и вынести их в собственные классы, называемые стратегиями.
        Вместо того, чтобы изначальный класс сам выполнял тот или иной алгоритм, он будет играть роль контекста, ссылаясь на одну из стратегий и делегируя ей выполнение работы. 
        Чтобы сменить алгоритм, вам будет достаточно подставить в контекст другой объект-стратегию.

Шаблонный метод
================
    Определяет скелет алгоритма, перекладывая ответственность за некоторые его шаги на подклассы. Паттерн позволяет подклассам переопределять шаги алгоритма, не меняя его общей структуры.
    Паттерн Шаблонный метод предлагает разбить алгоритм на последовательность шагов, описать эти шаги в отдельных методах и вызывать их в одном шаблонном методе друг за другом.
        Это позволит подклассам переопределять некоторые шаги алгоритма, оставляя без изменений его структуру и остальные шаги, которые для этого подкласса не так важны.

    Шаблонный метод использует наследование, чтобы расширять части алгоритма. Стратегия использует делегирование, чтобы изменять выполняемые алгоритмы на лету. 
    Шаблонный метод работает на уровне классов. Стратегия позволяет менять логику отдельных объектов.

Посетитель (Visitor)
====================
    Позволяет добавлять в программу новые операции, не изменяя классы объектов, над которыми эти операции могут выполняться.
    Паттерн Посетитель предлагает разместить новое поведение в отдельном классе, вместо того чтобы множить его сразу в нескольких классах. 
        Объекты, с которыми должно было быть связано поведение, не будут выполнять его самостоятельно. Вместо этого вы будете передавать эти объекты в методы посетителя.
