.. include:: ../../defs.rst

Поведенческие
*************

.. contents::
    :local:

.. container:: left-col

    Решают задачи эффективного и безопасного взаимодействия между объектами программы.



Цепочка обязанностей
======================
.. container:: left-col

    Позволяет передавать запросы последовательно по цепочке обработчиков. Каждый последующий обработчик решает, может ли он обработать запрос сам и стоит ли передавать запрос дальше по цепи.

    .. toggle-header::
        :header: Аналогия

        .. figure:: ../../_static/patterns/31_.png

.. container:: right-col

    .. figure:: ../../_static/patterns/31.png

Команда
=======
.. container:: left-col

    Превращает запросы в объекты, позволяя передавать их как аргументы при вызове методов, ставить запросы в очередь, логировать их, а также поддерживать отмену операций.

    .. toggle-header::
        :header: Аналогия

        .. figure:: ../../_static/patterns/32_.png

.. container:: right-col

    .. figure:: ../../_static/patterns/32.png


Итератор
==========
.. container:: left-col

    Даёт возможность последовательно обходить элементы составных объектов, не раскрывая их внутреннего представления.

    .. toggle-header::
        :header: Аналогия

        .. figure:: ../../_static/patterns/33_.png

.. container:: right-col

    .. figure:: ../../_static/patterns/33.png


Посредник
===========
.. container:: left-col

    Позволяет уменьшить связанность множества классов между собой, благодаря перемещению этих связей в один класс-посредник.

    Паттерн Посредник заставляет объекты общаться не напрямую друг с другом, а через отдельный объект-посредник, который знает, кому нужно перенаправить тот или иной запрос. 
    Благодаря этому, компоненты системы будут зависеть только от посредника, а не от десятков других компонентов.

    .. toggle-header::
        :header: Аналогия

        .. figure:: ../../_static/patterns/34_.png

.. container:: right-col

    .. figure:: ../../_static/patterns/34.png


Снимок
======
.. container:: left-col

    Позволяет сохранять и восстанавливать прошлые состояния объектов, не раскрывая подробностей их реализации.

    Паттерн Снимок поручает создание копии состояния объекта самому объекту, который этим состоянием владеет.

    .. toggle-header::
        :header: Аналогия

        .. figure:: ../../_static/patterns/35_.png

    |br|

.. container:: right-col

    .. figure:: ../../_static/patterns/35.png


Наблюдатель
===========
.. container:: left-col

    Создаёт механизм подписки, позволяющий одним объектам следить и реагировать на события, происходящие в других объектах.

    .. toggle-header::
        :header: Аналогия

        .. figure:: ../../_static/patterns/36_.png

.. container:: right-col

    .. figure:: ../../_static/patterns/36.png


Состояние
============
.. container:: left-col

    Позволяет объектам менять поведение в зависимости от своего состояния. Извне создаётся впечатление, что изменился класс объекта.

    В Состоянии сами конкретные состояния могут переключать контекст (исполняемое поведение).

    .. toggle-header::
        :header: Аналогия

        .. figure:: ../../_static/patterns/37_.png

.. container:: right-col

    .. figure:: ../../_static/patterns/37.png


Стратегия
==========
.. container:: left-col

    Определяет семейство схожих алгоритмов и помещает каждый из них в собственный класс, после чего алгоритмы можно взаимозаменять прямо во время исполнения программы.

    Паттерн Стратегия предлагает определить семейство схожих алгоритмов, которые часто изменяются или расширяются, и вынести их в собственные классы, называемые стратегиями.
    Вместо того, чтобы изначальный класс сам выполнял тот или иной алгоритм, он будет играть роль контекста, ссылаясь на одну из стратегий и делегируя ей выполнение работы. 
    Чтобы сменить алгоритм, вам будет достаточно подставить в контекст другой объект-стратегию.

    .. toggle-header::
        :header: Аналогия

        .. figure:: ../../_static/patterns/38_.png

.. container:: right-col

    .. figure:: ../../_static/patterns/38.png


Шаблонный метод
================
.. container:: left-col

    Определяет скелет алгоритма, перекладывая ответственность за некоторые его шаги на подклассы. Паттерн позволяет подклассам переопределять шаги алгоритма, не меняя его общей структуры.

    Паттерн Шаблонный метод предлагает разбить алгоритм на последовательность шагов, описать эти шаги в отдельных методах и вызывать их в одном шаблонном методе друг за другом.
    Это позволит подклассам переопределять некоторые шаги алгоритма, оставляя без изменений его структуру и остальные шаги, которые для этого подкласса не так важны.

    .. note::
        Шаблонный метод использует наследование, чтобы расширять части алгоритма. Стратегия использует делегирование, чтобы изменять выполняемые алгоритмы на лету. 

        Шаблонный метод работает на уровне классов. Стратегия позволяет менять логику отдельных объектов.

    .. toggle-header::
        :header: Аналогия

        .. figure:: ../../_static/patterns/39_.png

.. container:: right-col

    .. figure:: ../../_static/patterns/39.png


Посетитель (Visitor)
====================
.. container:: left-col

    Позволяет добавлять в программу новые операции, не изменяя классы объектов, над которыми эти операции могут выполняться.

    Паттерн Посетитель предлагает разместить новое поведение в отдельном классе, вместо того чтобы множить его сразу в нескольких классах. 
    
    Объекты, с которыми должно было быть связано поведение, не будут выполнять его самостоятельно. Вместо этого вы будете передавать эти объекты в методы посетителя.


    .. toggle-header::
        :header: Аналогия

        .. figure:: ../../_static/patterns/30_.png

.. container:: right-col

    .. figure:: ../../_static/patterns/30.png

